### YamlMime:ManagedReference
items:
- uid: Geko.HttpClientService.Infrastructure.CoreHttpClient
  commentId: T:Geko.HttpClientService.Infrastructure.CoreHttpClient
  id: CoreHttpClient
  parent: Geko.HttpClientService.Infrastructure
  children:
  - Geko.HttpClientService.Infrastructure.CoreHttpClient.#ctor(HttpClient)
  - Geko.HttpClientService.Infrastructure.CoreHttpClient.SendAsync(HttpRequestMessage)
  - Geko.HttpClientService.Infrastructure.CoreHttpClient.SetTimeout(TimeSpan)
  langs:
  - csharp
  - vb
  name: CoreHttpClient
  nameWithType: CoreHttpClient
  fullName: Geko.HttpClientService.Infrastructure.CoreHttpClient
  type: Class
  source:
    remote:
      path: src/Geko.HttpClientService/Infrastructure/Core/CoreHttpClient.cs
      branch: release/3.0.0
      repo: https://github.com/georgekosmidis/System.Net.Http.HttpClientService.git
    id: CoreHttpClient
    path: ../src/Geko.HttpClientService/Infrastructure/Core/CoreHttpClient.cs
    startLine: 5
  assemblies:
  - Geko.HttpClientService
  namespace: Geko.HttpClientService.Infrastructure
  summary: "\nImplementation for a typed <see cref=\"!:HttpClient\"></see>.\n"
  example: []
  syntax:
    content: 'public class CoreHttpClient : ICoreHttpClient'
    content.vb: >-
      Public Class CoreHttpClient
          Implements ICoreHttpClient
  inheritance:
  - System.Object
  implements:
  - Geko.HttpClientService.Infrastructure.ICoreHttpClient
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Geko.HttpClientService.Infrastructure.CoreHttpClient.#ctor(HttpClient)
  commentId: M:Geko.HttpClientService.Infrastructure.CoreHttpClient.#ctor(HttpClient)
  id: '#ctor(HttpClient)'
  parent: Geko.HttpClientService.Infrastructure.CoreHttpClient
  langs:
  - csharp
  - vb
  name: CoreHttpClient(HttpClient)
  nameWithType: CoreHttpClient.CoreHttpClient(HttpClient)
  fullName: Geko.HttpClientService.Infrastructure.CoreHttpClient.CoreHttpClient(HttpClient)
  type: Constructor
  source:
    remote:
      path: src/Geko.HttpClientService/Infrastructure/Core/CoreHttpClient.cs
      branch: release/3.0.0
      repo: https://github.com/georgekosmidis/System.Net.Http.HttpClientService.git
    id: .ctor
    path: ../src/Geko.HttpClientService/Infrastructure/Core/CoreHttpClient.cs
    startLine: 14
  assemblies:
  - Geko.HttpClientService
  namespace: Geko.HttpClientService.Infrastructure
  summary: "\nConstructor of the <xref href=\"Geko.HttpClientService.Infrastructure.CoreHttpClient\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public CoreHttpClient(HttpClient httpClient)
    parameters:
    - id: httpClient
      type: HttpClient
      description: An <see cref="!:HttpClient"></see> that will execute the request
    content.vb: Public Sub New(httpClient As HttpClient)
  overload: Geko.HttpClientService.Infrastructure.CoreHttpClient.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Geko.HttpClientService.Infrastructure.CoreHttpClient.SetTimeout(TimeSpan)
  commentId: M:Geko.HttpClientService.Infrastructure.CoreHttpClient.SetTimeout(TimeSpan)
  id: SetTimeout(TimeSpan)
  parent: Geko.HttpClientService.Infrastructure.CoreHttpClient
  langs:
  - csharp
  - vb
  name: SetTimeout(TimeSpan)
  nameWithType: CoreHttpClient.SetTimeout(TimeSpan)
  fullName: Geko.HttpClientService.Infrastructure.CoreHttpClient.SetTimeout(TimeSpan)
  type: Method
  source:
    remote:
      path: src/Geko.HttpClientService/Infrastructure/Core/CoreHttpClient.cs
      branch: release/3.0.0
      repo: https://github.com/georgekosmidis/System.Net.Http.HttpClientService.git
    id: SetTimeout
    path: ../src/Geko.HttpClientService/Infrastructure/Core/CoreHttpClient.cs
    startLine: 23
  assemblies:
  - Geko.HttpClientService
  namespace: Geko.HttpClientService.Infrastructure
  summary: "\nSet the timeout for the next request.\n"
  example: []
  syntax:
    content: public void SetTimeout(TimeSpan timeout)
    parameters:
    - id: timeout
      type: TimeSpan
      description: The timeout.
    content.vb: Public Sub SetTimeout(timeout As TimeSpan)
  overload: Geko.HttpClientService.Infrastructure.CoreHttpClient.SetTimeout*
  implements:
  - Geko.HttpClientService.Infrastructure.ICoreHttpClient.SetTimeout(TimeSpan)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Geko.HttpClientService.Infrastructure.CoreHttpClient.SendAsync(HttpRequestMessage)
  commentId: M:Geko.HttpClientService.Infrastructure.CoreHttpClient.SendAsync(HttpRequestMessage)
  id: SendAsync(HttpRequestMessage)
  parent: Geko.HttpClientService.Infrastructure.CoreHttpClient
  langs:
  - csharp
  - vb
  name: SendAsync(HttpRequestMessage)
  nameWithType: CoreHttpClient.SendAsync(HttpRequestMessage)
  fullName: Geko.HttpClientService.Infrastructure.CoreHttpClient.SendAsync(HttpRequestMessage)
  type: Method
  source:
    remote:
      path: src/Geko.HttpClientService/Infrastructure/Core/CoreHttpClient.cs
      branch: release/3.0.0
      repo: https://github.com/georgekosmidis/System.Net.Http.HttpClientService.git
    id: SendAsync
    path: ../src/Geko.HttpClientService/Infrastructure/Core/CoreHttpClient.cs
    startLine: 33
  assemblies:
  - Geko.HttpClientService
  namespace: Geko.HttpClientService.Infrastructure
  summary: "\nSends an <see cref=\"!:HttpResponseMessage\"></see>.\n"
  example: []
  syntax:
    content: public async Task<HttpResponseMessage> SendAsync(HttpRequestMessage httpRequestMessage)
    parameters:
    - id: httpRequestMessage
      type: HttpRequestMessage
      description: The <see cref="!:HttpResponseMessage"></see> to be sent.
    return:
      type: Task{HttpResponseMessage}
      description: An <see cref="!:HttpResponseMessage"></see>.
    content.vb: Public Function SendAsync(httpRequestMessage As HttpRequestMessage) As Task(Of HttpResponseMessage)
  overload: Geko.HttpClientService.Infrastructure.CoreHttpClient.SendAsync*
  implements:
  - Geko.HttpClientService.Infrastructure.ICoreHttpClient.SendAsync(HttpRequestMessage)
  modifiers.csharp:
  - public
  - async
  modifiers.vb:
  - Public
references:
- uid: Geko.HttpClientService.Infrastructure
  commentId: N:Geko.HttpClientService.Infrastructure
  name: Geko.HttpClientService.Infrastructure
  nameWithType: Geko.HttpClientService.Infrastructure
  fullName: Geko.HttpClientService.Infrastructure
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Geko.HttpClientService.Infrastructure.ICoreHttpClient
  commentId: T:Geko.HttpClientService.Infrastructure.ICoreHttpClient
  parent: Geko.HttpClientService.Infrastructure
  name: ICoreHttpClient
  nameWithType: ICoreHttpClient
  fullName: Geko.HttpClientService.Infrastructure.ICoreHttpClient
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Geko.HttpClientService.Infrastructure.CoreHttpClient
  commentId: T:Geko.HttpClientService.Infrastructure.CoreHttpClient
  name: CoreHttpClient
  nameWithType: CoreHttpClient
  fullName: Geko.HttpClientService.Infrastructure.CoreHttpClient
- uid: Geko.HttpClientService.Infrastructure.CoreHttpClient.#ctor*
  commentId: Overload:Geko.HttpClientService.Infrastructure.CoreHttpClient.#ctor
  name: CoreHttpClient
  nameWithType: CoreHttpClient.CoreHttpClient
  fullName: Geko.HttpClientService.Infrastructure.CoreHttpClient.CoreHttpClient
- uid: HttpClient
  isExternal: true
  name: HttpClient
  nameWithType: HttpClient
  fullName: HttpClient
- uid: Geko.HttpClientService.Infrastructure.CoreHttpClient.SetTimeout*
  commentId: Overload:Geko.HttpClientService.Infrastructure.CoreHttpClient.SetTimeout
  name: SetTimeout
  nameWithType: CoreHttpClient.SetTimeout
  fullName: Geko.HttpClientService.Infrastructure.CoreHttpClient.SetTimeout
- uid: Geko.HttpClientService.Infrastructure.ICoreHttpClient.SetTimeout(TimeSpan)
  commentId: M:Geko.HttpClientService.Infrastructure.ICoreHttpClient.SetTimeout(TimeSpan)
  parent: Geko.HttpClientService.Infrastructure.ICoreHttpClient
  isExternal: true
  name: SetTimeout(TimeSpan)
  nameWithType: ICoreHttpClient.SetTimeout(TimeSpan)
  fullName: Geko.HttpClientService.Infrastructure.ICoreHttpClient.SetTimeout(TimeSpan)
  spec.csharp:
  - uid: Geko.HttpClientService.Infrastructure.ICoreHttpClient.SetTimeout(TimeSpan)
    name: SetTimeout
    nameWithType: ICoreHttpClient.SetTimeout
    fullName: Geko.HttpClientService.Infrastructure.ICoreHttpClient.SetTimeout
  - name: (
    nameWithType: (
    fullName: (
  - uid: TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: TimeSpan
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Geko.HttpClientService.Infrastructure.ICoreHttpClient.SetTimeout(TimeSpan)
    name: SetTimeout
    nameWithType: ICoreHttpClient.SetTimeout
    fullName: Geko.HttpClientService.Infrastructure.ICoreHttpClient.SetTimeout
  - name: (
    nameWithType: (
    fullName: (
  - uid: TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: TimeSpan
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TimeSpan
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: TimeSpan
- uid: Geko.HttpClientService.Infrastructure.CoreHttpClient.SendAsync*
  commentId: Overload:Geko.HttpClientService.Infrastructure.CoreHttpClient.SendAsync
  name: SendAsync
  nameWithType: CoreHttpClient.SendAsync
  fullName: Geko.HttpClientService.Infrastructure.CoreHttpClient.SendAsync
- uid: Geko.HttpClientService.Infrastructure.ICoreHttpClient.SendAsync(HttpRequestMessage)
  commentId: M:Geko.HttpClientService.Infrastructure.ICoreHttpClient.SendAsync(HttpRequestMessage)
  parent: Geko.HttpClientService.Infrastructure.ICoreHttpClient
  isExternal: true
  name: SendAsync(HttpRequestMessage)
  nameWithType: ICoreHttpClient.SendAsync(HttpRequestMessage)
  fullName: Geko.HttpClientService.Infrastructure.ICoreHttpClient.SendAsync(HttpRequestMessage)
  spec.csharp:
  - uid: Geko.HttpClientService.Infrastructure.ICoreHttpClient.SendAsync(HttpRequestMessage)
    name: SendAsync
    nameWithType: ICoreHttpClient.SendAsync
    fullName: Geko.HttpClientService.Infrastructure.ICoreHttpClient.SendAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: HttpRequestMessage
    name: HttpRequestMessage
    nameWithType: HttpRequestMessage
    fullName: HttpRequestMessage
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Geko.HttpClientService.Infrastructure.ICoreHttpClient.SendAsync(HttpRequestMessage)
    name: SendAsync
    nameWithType: ICoreHttpClient.SendAsync
    fullName: Geko.HttpClientService.Infrastructure.ICoreHttpClient.SendAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: HttpRequestMessage
    name: HttpRequestMessage
    nameWithType: HttpRequestMessage
    fullName: HttpRequestMessage
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: HttpRequestMessage
  isExternal: true
  name: HttpRequestMessage
  nameWithType: HttpRequestMessage
  fullName: HttpRequestMessage
- uid: Task{HttpResponseMessage}
  commentId: '!:Task{HttpResponseMessage}'
  definition: Task`1
  name: Task<HttpResponseMessage>
  nameWithType: Task<HttpResponseMessage>
  fullName: Task<HttpResponseMessage>
  nameWithType.vb: Task(Of HttpResponseMessage)
  fullName.vb: Task(Of HttpResponseMessage)
  name.vb: Task(Of HttpResponseMessage)
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: HttpResponseMessage
    name: HttpResponseMessage
    nameWithType: HttpResponseMessage
    fullName: HttpResponseMessage
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: HttpResponseMessage
    name: HttpResponseMessage
    nameWithType: HttpResponseMessage
    fullName: HttpResponseMessage
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Task`1
  isExternal: true
  name: Task<>
  nameWithType: Task<>
  fullName: Task<>
  nameWithType.vb: Task(Of )
  fullName.vb: Task(Of )
  name.vb: Task(Of )
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
