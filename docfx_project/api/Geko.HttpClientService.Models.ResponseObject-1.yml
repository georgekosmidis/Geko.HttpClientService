### YamlMime:ManagedReference
items:
- uid: Geko.HttpClientService.Models.ResponseObject`1
  commentId: T:Geko.HttpClientService.Models.ResponseObject`1
  id: ResponseObject`1
  parent: Geko.HttpClientService.Models
  children:
  - Geko.HttpClientService.Models.ResponseObject`1.BodyAsStream
  - Geko.HttpClientService.Models.ResponseObject`1.BodyAsString
  - Geko.HttpClientService.Models.ResponseObject`1.BodyAsType
  - Geko.HttpClientService.Models.ResponseObject`1.Error
  - Geko.HttpClientService.Models.ResponseObject`1.HasError
  - Geko.HttpClientService.Models.ResponseObject`1.Headers
  - Geko.HttpClientService.Models.ResponseObject`1.HttpRequestMessge
  - Geko.HttpClientService.Models.ResponseObject`1.HttpResponseMessage
  - Geko.HttpClientService.Models.ResponseObject`1.StatusCode
  langs:
  - csharp
  - vb
  name: ResponseObject<TResponseBody>
  nameWithType: ResponseObject<TResponseBody>
  fullName: Geko.HttpClientService.Models.ResponseObject<TResponseBody>
  type: Class
  source:
    remote:
      path: src/Geko.HttpClientService/Models/ResponseObject.cs
      branch: release/3.0.0
      repo: https://github.com/georgekosmidis/System.Net.Http.HttpClientService.git
    id: ResponseObject
    path: ../src/Geko.HttpClientService/Models/ResponseObject.cs
    startLine: 9
  assemblies:
  - Geko.HttpClientService
  namespace: Geko.HttpClientService.Models
  summary: "\nAn object containing information about the response of the current request.\n"
  example: []
  syntax:
    content: public class ResponseObject<TResponseBody>
    typeParameters:
    - id: TResponseBody
      description: Type of the body of the response.
    content.vb: Public Class ResponseObject(Of TResponseBody)
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  nameWithType.vb: ResponseObject(Of TResponseBody)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: Geko.HttpClientService.Models.ResponseObject(Of TResponseBody)
  name.vb: ResponseObject(Of TResponseBody)
- uid: Geko.HttpClientService.Models.ResponseObject`1.Headers
  commentId: P:Geko.HttpClientService.Models.ResponseObject`1.Headers
  id: Headers
  parent: Geko.HttpClientService.Models.ResponseObject`1
  langs:
  - csharp
  - vb
  name: Headers
  nameWithType: ResponseObject<TResponseBody>.Headers
  fullName: Geko.HttpClientService.Models.ResponseObject<TResponseBody>.Headers
  type: Property
  source:
    remote:
      path: src/Geko.HttpClientService/Models/ResponseObject.cs
      branch: release/3.0.0
      repo: https://github.com/georgekosmidis/System.Net.Http.HttpClientService.git
    id: Headers
    path: ../src/Geko.HttpClientService/Models/ResponseObject.cs
    startLine: 14
  assemblies:
  - Geko.HttpClientService
  namespace: Geko.HttpClientService.Models
  summary: "\nThe <xref href=\"System.Net.Http.Headers.HttpResponseHeaders\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public HttpResponseHeaders Headers { get; set; }
    parameters: []
    return:
      type: System.Net.Http.Headers.HttpResponseHeaders
    content.vb: Public Property Headers As HttpResponseHeaders
  overload: Geko.HttpClientService.Models.ResponseObject`1.Headers*
  nameWithType.vb: ResponseObject(Of TResponseBody).Headers
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: Geko.HttpClientService.Models.ResponseObject(Of TResponseBody).Headers
- uid: Geko.HttpClientService.Models.ResponseObject`1.BodyAsType
  commentId: P:Geko.HttpClientService.Models.ResponseObject`1.BodyAsType
  id: BodyAsType
  parent: Geko.HttpClientService.Models.ResponseObject`1
  langs:
  - csharp
  - vb
  name: BodyAsType
  nameWithType: ResponseObject<TResponseBody>.BodyAsType
  fullName: Geko.HttpClientService.Models.ResponseObject<TResponseBody>.BodyAsType
  type: Property
  source:
    remote:
      path: src/Geko.HttpClientService/Models/ResponseObject.cs
      branch: release/3.0.0
      repo: https://github.com/georgekosmidis/System.Net.Http.HttpClientService.git
    id: BodyAsType
    path: ../src/Geko.HttpClientService/Models/ResponseObject.cs
    startLine: 19
  assemblies:
  - Geko.HttpClientService
  namespace: Geko.HttpClientService.Models
  summary: "\nThe body of the response converted to <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">TResponseBody</code>.\n"
  example: []
  syntax:
    content: public TResponseBody BodyAsType { get; set; }
    parameters: []
    return:
      type: '{TResponseBody}'
    content.vb: Public Property BodyAsType As TResponseBody
  overload: Geko.HttpClientService.Models.ResponseObject`1.BodyAsType*
  nameWithType.vb: ResponseObject(Of TResponseBody).BodyAsType
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: Geko.HttpClientService.Models.ResponseObject(Of TResponseBody).BodyAsType
- uid: Geko.HttpClientService.Models.ResponseObject`1.BodyAsString
  commentId: P:Geko.HttpClientService.Models.ResponseObject`1.BodyAsString
  id: BodyAsString
  parent: Geko.HttpClientService.Models.ResponseObject`1
  langs:
  - csharp
  - vb
  name: BodyAsString
  nameWithType: ResponseObject<TResponseBody>.BodyAsString
  fullName: Geko.HttpClientService.Models.ResponseObject<TResponseBody>.BodyAsString
  type: Property
  source:
    remote:
      path: src/Geko.HttpClientService/Models/ResponseObject.cs
      branch: release/3.0.0
      repo: https://github.com/georgekosmidis/System.Net.Http.HttpClientService.git
    id: BodyAsString
    path: ../src/Geko.HttpClientService/Models/ResponseObject.cs
    startLine: 24
  assemblies:
  - Geko.HttpClientService
  namespace: Geko.HttpClientService.Models
  summary: "\nThe body of the response as <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public string BodyAsString { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property BodyAsString As String
  overload: Geko.HttpClientService.Models.ResponseObject`1.BodyAsString*
  nameWithType.vb: ResponseObject(Of TResponseBody).BodyAsString
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: Geko.HttpClientService.Models.ResponseObject(Of TResponseBody).BodyAsString
- uid: Geko.HttpClientService.Models.ResponseObject`1.BodyAsStream
  commentId: P:Geko.HttpClientService.Models.ResponseObject`1.BodyAsStream
  id: BodyAsStream
  parent: Geko.HttpClientService.Models.ResponseObject`1
  langs:
  - csharp
  - vb
  name: BodyAsStream
  nameWithType: ResponseObject<TResponseBody>.BodyAsStream
  fullName: Geko.HttpClientService.Models.ResponseObject<TResponseBody>.BodyAsStream
  type: Property
  source:
    remote:
      path: src/Geko.HttpClientService/Models/ResponseObject.cs
      branch: release/3.0.0
      repo: https://github.com/georgekosmidis/System.Net.Http.HttpClientService.git
    id: BodyAsStream
    path: ../src/Geko.HttpClientService/Models/ResponseObject.cs
    startLine: 29
  assemblies:
  - Geko.HttpClientService
  namespace: Geko.HttpClientService.Models
  summary: "\nThe body of the response as <see cref=\"!:Stream\"></see>.\n"
  example: []
  syntax:
    content: public Stream? BodyAsStream { get; set; }
    parameters: []
    return:
      type: System.Nullable{Stream}
    content.vb: Public Property BodyAsStream As Stream?
  overload: Geko.HttpClientService.Models.ResponseObject`1.BodyAsStream*
  nameWithType.vb: ResponseObject(Of TResponseBody).BodyAsStream
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: Geko.HttpClientService.Models.ResponseObject(Of TResponseBody).BodyAsStream
- uid: Geko.HttpClientService.Models.ResponseObject`1.StatusCode
  commentId: P:Geko.HttpClientService.Models.ResponseObject`1.StatusCode
  id: StatusCode
  parent: Geko.HttpClientService.Models.ResponseObject`1
  langs:
  - csharp
  - vb
  name: StatusCode
  nameWithType: ResponseObject<TResponseBody>.StatusCode
  fullName: Geko.HttpClientService.Models.ResponseObject<TResponseBody>.StatusCode
  type: Property
  source:
    remote:
      path: src/Geko.HttpClientService/Models/ResponseObject.cs
      branch: release/3.0.0
      repo: https://github.com/georgekosmidis/System.Net.Http.HttpClientService.git
    id: StatusCode
    path: ../src/Geko.HttpClientService/Models/ResponseObject.cs
    startLine: 34
  assemblies:
  - Geko.HttpClientService
  namespace: Geko.HttpClientService.Models
  summary: "\nThe <xref href=\"System.Net.HttpStatusCode\" data-throw-if-not-resolved=\"false\"></xref> of the response.\n"
  example: []
  syntax:
    content: public HttpStatusCode StatusCode { get; set; }
    parameters: []
    return:
      type: System.Net.HttpStatusCode
    content.vb: Public Property StatusCode As HttpStatusCode
  overload: Geko.HttpClientService.Models.ResponseObject`1.StatusCode*
  nameWithType.vb: ResponseObject(Of TResponseBody).StatusCode
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: Geko.HttpClientService.Models.ResponseObject(Of TResponseBody).StatusCode
- uid: Geko.HttpClientService.Models.ResponseObject`1.HttpResponseMessage
  commentId: P:Geko.HttpClientService.Models.ResponseObject`1.HttpResponseMessage
  id: HttpResponseMessage
  parent: Geko.HttpClientService.Models.ResponseObject`1
  langs:
  - csharp
  - vb
  name: HttpResponseMessage
  nameWithType: ResponseObject<TResponseBody>.HttpResponseMessage
  fullName: Geko.HttpClientService.Models.ResponseObject<TResponseBody>.HttpResponseMessage
  type: Property
  source:
    remote:
      path: src/Geko.HttpClientService/Models/ResponseObject.cs
      branch: release/3.0.0
      repo: https://github.com/georgekosmidis/System.Net.Http.HttpClientService.git
    id: HttpResponseMessage
    path: ../src/Geko.HttpClientService/Models/ResponseObject.cs
    startLine: 39
  assemblies:
  - Geko.HttpClientService
  namespace: Geko.HttpClientService.Models
  summary: "\nThe entire <xref href=\"System.Net.Http.HttpResponseMessage\" data-throw-if-not-resolved=\"false\"></xref> object.\n"
  example: []
  syntax:
    content: public HttpResponseMessage? HttpResponseMessage { get; set; }
    parameters: []
    return:
      type: System.Nullable{HttpResponseMessage}
    content.vb: Public Property HttpResponseMessage As HttpResponseMessage?
  overload: Geko.HttpClientService.Models.ResponseObject`1.HttpResponseMessage*
  nameWithType.vb: ResponseObject(Of TResponseBody).HttpResponseMessage
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: Geko.HttpClientService.Models.ResponseObject(Of TResponseBody).HttpResponseMessage
- uid: Geko.HttpClientService.Models.ResponseObject`1.HttpRequestMessge
  commentId: P:Geko.HttpClientService.Models.ResponseObject`1.HttpRequestMessge
  id: HttpRequestMessge
  parent: Geko.HttpClientService.Models.ResponseObject`1
  langs:
  - csharp
  - vb
  name: HttpRequestMessge
  nameWithType: ResponseObject<TResponseBody>.HttpRequestMessge
  fullName: Geko.HttpClientService.Models.ResponseObject<TResponseBody>.HttpRequestMessge
  type: Property
  source:
    remote:
      path: src/Geko.HttpClientService/Models/ResponseObject.cs
      branch: release/3.0.0
      repo: https://github.com/georgekosmidis/System.Net.Http.HttpClientService.git
    id: HttpRequestMessge
    path: ../src/Geko.HttpClientService/Models/ResponseObject.cs
    startLine: 44
  assemblies:
  - Geko.HttpClientService
  namespace: Geko.HttpClientService.Models
  summary: "\nThe entire <see cref=\"!:HttpRequestMessage\"></see> object for debugging purposes.\n"
  example: []
  syntax:
    content: public HttpRequestMessage? HttpRequestMessge { get; set; }
    parameters: []
    return:
      type: System.Nullable{HttpRequestMessage}
    content.vb: Public Property HttpRequestMessge As HttpRequestMessage?
  overload: Geko.HttpClientService.Models.ResponseObject`1.HttpRequestMessge*
  nameWithType.vb: ResponseObject(Of TResponseBody).HttpRequestMessge
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: Geko.HttpClientService.Models.ResponseObject(Of TResponseBody).HttpRequestMessge
- uid: Geko.HttpClientService.Models.ResponseObject`1.HasError
  commentId: P:Geko.HttpClientService.Models.ResponseObject`1.HasError
  id: HasError
  parent: Geko.HttpClientService.Models.ResponseObject`1
  langs:
  - csharp
  - vb
  name: HasError
  nameWithType: ResponseObject<TResponseBody>.HasError
  fullName: Geko.HttpClientService.Models.ResponseObject<TResponseBody>.HasError
  type: Property
  source:
    remote:
      path: src/Geko.HttpClientService/Models/ResponseObject.cs
      branch: release/3.0.0
      repo: https://github.com/georgekosmidis/System.Net.Http.HttpClientService.git
    id: HasError
    path: ../src/Geko.HttpClientService/Models/ResponseObject.cs
    startLine: 49
  assemblies:
  - Geko.HttpClientService
  namespace: Geko.HttpClientService.Models
  summary: "\nA boolean indicating if there is an error in the current request.\n"
  example: []
  syntax:
    content: public bool HasError { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property HasError As Boolean
  overload: Geko.HttpClientService.Models.ResponseObject`1.HasError*
  nameWithType.vb: ResponseObject(Of TResponseBody).HasError
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: Geko.HttpClientService.Models.ResponseObject(Of TResponseBody).HasError
- uid: Geko.HttpClientService.Models.ResponseObject`1.Error
  commentId: P:Geko.HttpClientService.Models.ResponseObject`1.Error
  id: Error
  parent: Geko.HttpClientService.Models.ResponseObject`1
  langs:
  - csharp
  - vb
  name: Error
  nameWithType: ResponseObject<TResponseBody>.Error
  fullName: Geko.HttpClientService.Models.ResponseObject<TResponseBody>.Error
  type: Property
  source:
    remote:
      path: src/Geko.HttpClientService/Models/ResponseObject.cs
      branch: release/3.0.0
      repo: https://github.com/georgekosmidis/System.Net.Http.HttpClientService.git
    id: Error
    path: ../src/Geko.HttpClientService/Models/ResponseObject.cs
    startLine: 54
  assemblies:
  - Geko.HttpClientService
  namespace: Geko.HttpClientService.Models
  summary: "\nA description of the error, if any.\n"
  example: []
  syntax:
    content: public string Error { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property Error As String
  overload: Geko.HttpClientService.Models.ResponseObject`1.Error*
  nameWithType.vb: ResponseObject(Of TResponseBody).Error
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: Geko.HttpClientService.Models.ResponseObject(Of TResponseBody).Error
references:
- uid: Geko.HttpClientService.Models
  commentId: N:Geko.HttpClientService.Models
  name: Geko.HttpClientService.Models
  nameWithType: Geko.HttpClientService.Models
  fullName: Geko.HttpClientService.Models
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Net.Http.Headers.HttpResponseHeaders
  commentId: T:System.Net.Http.Headers.HttpResponseHeaders
  parent: System.Net.Http.Headers
  isExternal: true
  name: HttpResponseHeaders
  nameWithType: HttpResponseHeaders
  fullName: System.Net.Http.Headers.HttpResponseHeaders
- uid: Geko.HttpClientService.Models.ResponseObject`1.Headers*
  commentId: Overload:Geko.HttpClientService.Models.ResponseObject`1.Headers
  name: Headers
  nameWithType: ResponseObject<TResponseBody>.Headers
  fullName: Geko.HttpClientService.Models.ResponseObject<TResponseBody>.Headers
  nameWithType.vb: ResponseObject(Of TResponseBody).Headers
  fullName.vb: Geko.HttpClientService.Models.ResponseObject(Of TResponseBody).Headers
- uid: System.Net.Http.Headers
  commentId: N:System.Net.Http.Headers
  isExternal: true
  name: System.Net.Http.Headers
  nameWithType: System.Net.Http.Headers
  fullName: System.Net.Http.Headers
- uid: Geko.HttpClientService.Models.ResponseObject`1.BodyAsType*
  commentId: Overload:Geko.HttpClientService.Models.ResponseObject`1.BodyAsType
  name: BodyAsType
  nameWithType: ResponseObject<TResponseBody>.BodyAsType
  fullName: Geko.HttpClientService.Models.ResponseObject<TResponseBody>.BodyAsType
  nameWithType.vb: ResponseObject(Of TResponseBody).BodyAsType
  fullName.vb: Geko.HttpClientService.Models.ResponseObject(Of TResponseBody).BodyAsType
- uid: '{TResponseBody}'
  commentId: '!:TResponseBody'
  definition: TResponseBody
  name: TResponseBody
  nameWithType: TResponseBody
  fullName: TResponseBody
- uid: TResponseBody
  commentId: '!:TResponseBody'
  name: TResponseBody
  nameWithType: TResponseBody
  fullName: TResponseBody
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Geko.HttpClientService.Models.ResponseObject`1.BodyAsString*
  commentId: Overload:Geko.HttpClientService.Models.ResponseObject`1.BodyAsString
  name: BodyAsString
  nameWithType: ResponseObject<TResponseBody>.BodyAsString
  fullName: Geko.HttpClientService.Models.ResponseObject<TResponseBody>.BodyAsString
  nameWithType.vb: ResponseObject(Of TResponseBody).BodyAsString
  fullName.vb: Geko.HttpClientService.Models.ResponseObject(Of TResponseBody).BodyAsString
- uid: Geko.HttpClientService.Models.ResponseObject`1.BodyAsStream*
  commentId: Overload:Geko.HttpClientService.Models.ResponseObject`1.BodyAsStream
  name: BodyAsStream
  nameWithType: ResponseObject<TResponseBody>.BodyAsStream
  fullName: Geko.HttpClientService.Models.ResponseObject<TResponseBody>.BodyAsStream
  nameWithType.vb: ResponseObject(Of TResponseBody).BodyAsStream
  fullName.vb: Geko.HttpClientService.Models.ResponseObject(Of TResponseBody).BodyAsStream
- uid: System.Nullable{Stream}
  commentId: T:System.Nullable{Stream}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Stream>
  nameWithType: Nullable<Stream>
  fullName: System.Nullable<Stream>
  nameWithType.vb: Nullable(Of Stream)
  fullName.vb: System.Nullable(Of Stream)
  name.vb: Nullable(Of Stream)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Stream
    name: Stream
    nameWithType: Stream
    fullName: Stream
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Stream
    name: Stream
    nameWithType: Stream
    fullName: Stream
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Net.HttpStatusCode
  commentId: T:System.Net.HttpStatusCode
  parent: System.Net
  isExternal: true
  name: HttpStatusCode
  nameWithType: HttpStatusCode
  fullName: System.Net.HttpStatusCode
- uid: Geko.HttpClientService.Models.ResponseObject`1.StatusCode*
  commentId: Overload:Geko.HttpClientService.Models.ResponseObject`1.StatusCode
  name: StatusCode
  nameWithType: ResponseObject<TResponseBody>.StatusCode
  fullName: Geko.HttpClientService.Models.ResponseObject<TResponseBody>.StatusCode
  nameWithType.vb: ResponseObject(Of TResponseBody).StatusCode
  fullName.vb: Geko.HttpClientService.Models.ResponseObject(Of TResponseBody).StatusCode
- uid: System.Net
  commentId: N:System.Net
  isExternal: true
  name: System.Net
  nameWithType: System.Net
  fullName: System.Net
- uid: System.Net.Http.HttpResponseMessage
  commentId: T:System.Net.Http.HttpResponseMessage
  isExternal: true
- uid: Geko.HttpClientService.Models.ResponseObject`1.HttpResponseMessage*
  commentId: Overload:Geko.HttpClientService.Models.ResponseObject`1.HttpResponseMessage
  name: HttpResponseMessage
  nameWithType: ResponseObject<TResponseBody>.HttpResponseMessage
  fullName: Geko.HttpClientService.Models.ResponseObject<TResponseBody>.HttpResponseMessage
  nameWithType.vb: ResponseObject(Of TResponseBody).HttpResponseMessage
  fullName.vb: Geko.HttpClientService.Models.ResponseObject(Of TResponseBody).HttpResponseMessage
- uid: System.Nullable{HttpResponseMessage}
  commentId: T:System.Nullable{HttpResponseMessage}
  parent: System
  definition: System.Nullable`1
  name: Nullable<HttpResponseMessage>
  nameWithType: Nullable<HttpResponseMessage>
  fullName: System.Nullable<HttpResponseMessage>
  nameWithType.vb: Nullable(Of HttpResponseMessage)
  fullName.vb: System.Nullable(Of HttpResponseMessage)
  name.vb: Nullable(Of HttpResponseMessage)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: HttpResponseMessage
    name: HttpResponseMessage
    nameWithType: HttpResponseMessage
    fullName: HttpResponseMessage
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: HttpResponseMessage
    name: HttpResponseMessage
    nameWithType: HttpResponseMessage
    fullName: HttpResponseMessage
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Geko.HttpClientService.Models.ResponseObject`1.HttpRequestMessge*
  commentId: Overload:Geko.HttpClientService.Models.ResponseObject`1.HttpRequestMessge
  name: HttpRequestMessge
  nameWithType: ResponseObject<TResponseBody>.HttpRequestMessge
  fullName: Geko.HttpClientService.Models.ResponseObject<TResponseBody>.HttpRequestMessge
  nameWithType.vb: ResponseObject(Of TResponseBody).HttpRequestMessge
  fullName.vb: Geko.HttpClientService.Models.ResponseObject(Of TResponseBody).HttpRequestMessge
- uid: System.Nullable{HttpRequestMessage}
  commentId: T:System.Nullable{HttpRequestMessage}
  parent: System
  definition: System.Nullable`1
  name: Nullable<HttpRequestMessage>
  nameWithType: Nullable<HttpRequestMessage>
  fullName: System.Nullable<HttpRequestMessage>
  nameWithType.vb: Nullable(Of HttpRequestMessage)
  fullName.vb: System.Nullable(Of HttpRequestMessage)
  name.vb: Nullable(Of HttpRequestMessage)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: HttpRequestMessage
    name: HttpRequestMessage
    nameWithType: HttpRequestMessage
    fullName: HttpRequestMessage
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: HttpRequestMessage
    name: HttpRequestMessage
    nameWithType: HttpRequestMessage
    fullName: HttpRequestMessage
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Geko.HttpClientService.Models.ResponseObject`1.HasError*
  commentId: Overload:Geko.HttpClientService.Models.ResponseObject`1.HasError
  name: HasError
  nameWithType: ResponseObject<TResponseBody>.HasError
  fullName: Geko.HttpClientService.Models.ResponseObject<TResponseBody>.HasError
  nameWithType.vb: ResponseObject(Of TResponseBody).HasError
  fullName.vb: Geko.HttpClientService.Models.ResponseObject(Of TResponseBody).HasError
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Geko.HttpClientService.Models.ResponseObject`1.Error*
  commentId: Overload:Geko.HttpClientService.Models.ResponseObject`1.Error
  name: Error
  nameWithType: ResponseObject<TResponseBody>.Error
  fullName: Geko.HttpClientService.Models.ResponseObject<TResponseBody>.Error
  nameWithType.vb: ResponseObject(Of TResponseBody).Error
  fullName.vb: Geko.HttpClientService.Models.ResponseObject(Of TResponseBody).Error
